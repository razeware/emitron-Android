apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'com.google.firebase.crashlytics'

apply plugin: 'kotlin-kapt'

apply plugin: 'androidx.navigation.safeargs.kotlin'

apply plugin: 'com.google.android.gms.oss-licenses-plugin'

apply plugin: 'dagger.hilt.android.plugin'

android {
  compileSdkVersion versions.compileSdk

  buildFeatures {
    dataBinding true
    viewBinding true
  }

  signingConfigs {
    release {
      storeFile rootProject.file("${keystore}")
      storePassword "${keystore_password}"
      keyAlias "${keystore_key_alias}"
      keyPassword "${keystore_key_password}"
      v1SigningEnabled true
      v2SigningEnabled true
    }
  }

  defaultConfig {
    applicationId "com.razeware.emitron"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode versions.versionCode
    versionName versions.versionName
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary true
    multiDexEnabled true
    resValue 'string', "client_api_key", "${client_api_key}"
    resValue 'string', "app_token", "${app_token}"
    buildConfigField 'String', "BASE_API_URL", "\"https://api.raywenderlich.com/api/\""

    kapt {
      arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
      }
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    debug {
      versionNameSuffix "-debug"
      ext.alwaysUpdateBuildId = false
    }

  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
  }

  androidExtensions {
    experimental = true
  }
}

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
  implementation project(':model')
  implementation project(':inappreview')
  implementation project(':styles')
  implementation project(':preferences')

  implementation "androidx.annotation:annotation:${versions.annotations}"

  implementation "androidx.appcompat:appcompat:${versions.appCompat}"
  implementation "androidx.fragment:fragment-ktx:${versions.fragmentKtx}"

  implementation "androidx.core:core-ktx:${versions.coreKtx}"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

  // WorkManager
  implementation "androidx.work:work-runtime-ktx:${versions.workManager}"

  // Dagger
  // https://developer.android.com/training/dependency-injection/hilt-android
  implementation "com.google.dagger:hilt-android:${versions.hilt}"
  kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"

  implementation "androidx.hilt:hilt-lifecycle-viewmodel:${versions.hiltViewModel}"
  kapt "androidx.hilt:hilt-compiler:${versions.hiltViewModel}"

  implementation "androidx.hilt:hilt-work:${versions.hiltWorkManager}"
  kapt "androidx.hilt:hilt-compiler:${versions.hiltWorkManager}"

  // Navigation
  // https://developer.android.com/guide/navigation/
  implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
  implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"

  // Coroutines
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

  // Architecture components
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.architectureComponents}"
  implementation "androidx.lifecycle:lifecycle-common-java8:${versions.architectureComponents}"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.architectureComponents}"
  implementation "androidx.paging:paging-runtime-ktx:${versions.architectureComponentsPaging}"

  // Play core
  implementation "com.google.android.play:core:${versions.playCore}"
  implementation "com.google.android.play:core-ktx:${versions.playCoreKtx}"


  implementation "com.google.android.material:material:${versions.materialDesign}"

  // RecyclerView
  implementation "androidx.recyclerview:recyclerview:${versions.recyclerView}"
  implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swiperefreshlayout}"

  // ConstraintLayout
  implementation "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"

  // VectorDrawable
  implementation "androidx.vectordrawable:vectordrawable:${versions.vectorDrawable}"

  // Exoplayer
  // https://github.com/google/ExoPlayer
  implementation "com.google.android.exoplayer:exoplayer-core:${versions.exoplayer}"
  implementation "com.google.android.exoplayer:exoplayer-ui:${versions.exoplayer}"
  implementation "com.google.android.exoplayer:exoplayer-hls:${versions.exoplayer}"
  implementation "com.google.android.exoplayer:extension-cast:${versions.exoplayer}"
  implementation "com.google.android.exoplayer:extension-mediasession:${versions.exoplayer}"


  // Retrofit
  // https://github.com/square/retrofit
  implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
  implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"

  // OkHttp
  // https://github.com/square/okhttp
  implementation "com.squareup.okhttp3:okhttp:${versions.okHttp}"
  implementation "com.squareup.okhttp3:logging-interceptor:${versions.okHttp}"

  // Moshi
  // https://github.com/square/moshi
  implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"

  implementation "androidx.room:room-ktx:${versions.room}"

  // Firebase
  implementation "com.google.firebase:firebase-perf:${versions.firebasePerf}"
  implementation "com.google.firebase:firebase-crashlytics:${versions.firebaseCrash}"

  // Glide
  // https://github.com/bumptech/glide
  implementation "com.github.bumptech.glide:glide:${versions.glide}"

  implementation "androidx.browser:browser:${versions.browser}"

  // Compilers/Annotation processors

  kapt "androidx.room:room-compiler:${versions.room}"
  kapt "com.github.bumptech.glide:compiler:${versions.glide}"

  implementation "androidx.mediarouter:mediarouter:${versions.mediarouter}"
  implementation "com.google.android.gms:play-services-cast-framework:${versions.castFramework}"

  // Test libraries

  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "org.mockito:mockito-inline:${versions.mockito}"
  testImplementation "org.mockito:mockito-android:${versions.mockito}"
  testImplementation "android.arch.core:core-testing:${versions.architectureComponents}"
  testImplementation "androidx.test:runner:${versions.testRunner}"
  testImplementation "androidx.test:rules:${versions.testRunner}"
  testImplementation "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}"
  testImplementation "com.google.truth:truth:${versions.googleTruth}"

  implementation "androidx.mediarouter:mediarouter:${versions.mediarouter}"
  implementation "com.google.android.gms:play-services-cast-framework:${versions.castFramework}"

  implementation "com.jakewharton.threetenabp:threetenabp:${versions.threetenabp}"
  implementation "com.afollestad:viewpagerdots:${versions.viewpagerdots}"

  implementation "com.google.android.gms:play-services-oss-licenses:${versions.playOss}"
  implementation "androidx.viewpager2:viewpager2:${versions.viewpager}"

}

apply plugin: 'com.google.gms.google-services'
